//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WS_Notifications.SRVnotification {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SRVnotification.iNotificationService")]
    public interface iNotificationService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/NotifyToCommunity")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToPerson))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToPermission))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToItemGuid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToItemLong))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToItemInt))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToRole))]
        void NotifyToCommunity(lm.Notification.DataContract.Domain.NotificationToCommunity Notification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/NotifyToUsers")]
        void NotifyToUsers(lm.Notification.DataContract.Domain.NotificationToPerson Notification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/NotifyForPermission")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToItemGuid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToItemLong))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(lm.Notification.DataContract.Domain.NotificationToItemInt))]
        void NotifyForPermission(lm.Notification.DataContract.Domain.NotificationToPermission Notification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/NotifyForRoles")]
        void NotifyForRoles(lm.Notification.DataContract.Domain.NotificationToRole Notification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/NotifyForPermissionItemGuid")]
        void NotifyForPermissionItemGuid(lm.Notification.DataContract.Domain.NotificationToItemGuid Notification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/NotifyForPermissionItemLong")]
        void NotifyForPermissionItemLong(lm.Notification.DataContract.Domain.NotificationToItemLong Notification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/NotifyForPermissionItemInt")]
        void NotifyForPermissionItemInt(lm.Notification.DataContract.Domain.NotificationToItemInt Notification);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/RemoveNotification")]
        void RemoveNotification(System.Guid NotificationID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/RemoveNotificationForUser")]
        void RemoveNotificationForUser(System.Guid NotificationID, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/RemoveUserNotification")]
        void RemoveUserNotification(System.Guid UserNotificationID, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/ReadNotification")]
        void ReadNotification(System.Guid NotificationID, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/ReadUserNotification")]
        void ReadUserNotification(System.Guid UserNotificationID, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/ReadUserCommunityNotification")]
        void ReadUserCommunityNotification(int CommunityID, int PersonID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/iNotificationService/RemoveUserCommunityNotification")]
        void RemoveUserCommunityNotification(int CommunityID, int PersonID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface iNotificationServiceChannel : WS_Notifications.SRVnotification.iNotificationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class iNotificationServiceClient : System.ServiceModel.ClientBase<WS_Notifications.SRVnotification.iNotificationService>, WS_Notifications.SRVnotification.iNotificationService {
        
        public iNotificationServiceClient() {
        }
        
        public iNotificationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public iNotificationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iNotificationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public iNotificationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void NotifyToCommunity(lm.Notification.DataContract.Domain.NotificationToCommunity Notification) {
            base.Channel.NotifyToCommunity(Notification);
        }
        
        public void NotifyToUsers(lm.Notification.DataContract.Domain.NotificationToPerson Notification) {
            base.Channel.NotifyToUsers(Notification);
        }
        
        public void NotifyForPermission(lm.Notification.DataContract.Domain.NotificationToPermission Notification) {
            base.Channel.NotifyForPermission(Notification);
        }
        
        public void NotifyForRoles(lm.Notification.DataContract.Domain.NotificationToRole Notification) {
            base.Channel.NotifyForRoles(Notification);
        }
        
        public void NotifyForPermissionItemGuid(lm.Notification.DataContract.Domain.NotificationToItemGuid Notification) {
            base.Channel.NotifyForPermissionItemGuid(Notification);
        }
        
        public void NotifyForPermissionItemLong(lm.Notification.DataContract.Domain.NotificationToItemLong Notification) {
            base.Channel.NotifyForPermissionItemLong(Notification);
        }
        
        public void NotifyForPermissionItemInt(lm.Notification.DataContract.Domain.NotificationToItemInt Notification) {
            base.Channel.NotifyForPermissionItemInt(Notification);
        }
        
        public void RemoveNotification(System.Guid NotificationID) {
            base.Channel.RemoveNotification(NotificationID);
        }
        
        public void RemoveNotificationForUser(System.Guid NotificationID, int PersonID) {
            base.Channel.RemoveNotificationForUser(NotificationID, PersonID);
        }
        
        public void RemoveUserNotification(System.Guid UserNotificationID, int PersonID) {
            base.Channel.RemoveUserNotification(UserNotificationID, PersonID);
        }
        
        public void ReadNotification(System.Guid NotificationID, int PersonID) {
            base.Channel.ReadNotification(NotificationID, PersonID);
        }
        
        public void ReadUserNotification(System.Guid UserNotificationID, int PersonID) {
            base.Channel.ReadUserNotification(UserNotificationID, PersonID);
        }
        
        public void ReadUserCommunityNotification(int CommunityID, int PersonID) {
            base.Channel.ReadUserCommunityNotification(CommunityID, PersonID);
        }
        
        public void RemoveUserCommunityNotification(int CommunityID, int PersonID) {
            base.Channel.RemoveUserCommunityNotification(CommunityID, PersonID);
        }
    }
}
